/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using generate.Models;

namespace generate.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class WhiskiesClient : IWhiskiesClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public WhiskiesClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// Get a list of all whiskies
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetWhiskiesWithHttpInfoAsync(System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"whiskies", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get a list of all whiskies
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<Whisky>?> GetWhiskiesAsync(System.Threading.CancellationToken token = default)
    {
        var __result = await GetWhiskiesWithHttpInfoAsync(token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<Whisky>?>(__result, token);
    }

    /// <summary>
    /// Create a new whisky
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostWhiskiesWithHttpInfoAsync(Whisky body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"whiskies", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Create a new whisky
    /// </summary>
    public async System.Threading.Tasks.Task PostWhiskiesAsync(Whisky body, System.Threading.CancellationToken token = default)
    {
        var __result = await PostWhiskiesWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// Get a single whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetWhiskiesWhiskyIdWithHttpInfoAsync(string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"whiskies/{whiskyId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get a single whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task<Whisky?> GetWhiskiesWhiskyIdAsync(string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __result = await GetWhiskiesWhiskyIdWithHttpInfoAsync(whiskyId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<Whisky?>(__result, token);
    }

    /// <summary>
    /// Update a whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutWhiskiesWhiskyIdWithHttpInfoAsync(Whisky body, string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"whiskies/{whiskyId}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Update a whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task<Whisky?> PutWhiskiesWhiskyIdAsync(Whisky body, string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __result = await PutWhiskiesWhiskyIdWithHttpInfoAsync(body, whiskyId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<Whisky?>(__result, token);
    }

    /// <summary>
    /// Delete a whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteWhiskiesWhiskyIdWithHttpInfoAsync(string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"whiskies/{whiskyId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Delete a whisky by ID
    /// </summary>
    public async System.Threading.Tasks.Task DeleteWhiskiesWhiskyIdAsync(string whiskyId, System.Threading.CancellationToken token = default)
    {
        var __result = await DeleteWhiskiesWhiskyIdWithHttpInfoAsync(whiskyId, token);
        await __my_options.InterceptResponse(__result, token);
    }
}

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
public interface IWhiskiesClient
{
    /// <summary>
    /// Get a list of all whiskies
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetWhiskiesWithHttpInfoAsync(System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a list of all whiskies
    /// </summary>
    public System.Threading.Tasks.Task<System.Collections.Generic.List<Whisky>?> GetWhiskiesAsync(System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create a new whisky
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostWhiskiesWithHttpInfoAsync(Whisky body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create a new whisky
    /// </summary>
    public System.Threading.Tasks.Task PostWhiskiesAsync(Whisky body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a single whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetWhiskiesWhiskyIdWithHttpInfoAsync(string whiskyId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a single whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task<Whisky?> GetWhiskiesWhiskyIdAsync(string whiskyId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Update a whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutWhiskiesWhiskyIdWithHttpInfoAsync(Whisky body, string whiskyId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Update a whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task<Whisky?> PutWhiskiesWhiskyIdAsync(Whisky body, string whiskyId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Delete a whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteWhiskiesWhiskyIdWithHttpInfoAsync(string whiskyId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Delete a whisky by ID
    /// </summary>
    public System.Threading.Tasks.Task DeleteWhiskiesWhiskyIdAsync(string whiskyId, System.Threading.CancellationToken token = default);
}
