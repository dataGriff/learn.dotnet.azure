/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using generate.Clients;

namespace generate;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class ApiRegistration
{
    public System.Func<System.IServiceProvider, ClientOptions>? OptionsFactory { get; set; }

    public ClientOptions? Options { get; set; }

    private System.Type _optionType = typeof(ClientOptions);
    public System.Type OptionType
    {
        get => _optionType;
        set
        {
            _optionType = value ?? throw new System.ArgumentNullException(nameof(OptionType));
            if (!typeof(ClientOptions).IsAssignableFrom(_optionType))
            {
                throw new System.NotSupportedException("OptionType must inherit ClientOptions");
            }
        }
    }

    private System.Action<System.IServiceProvider, System.Net.Http.HttpClient>? _configureClientWithServiceProvider;
    public System.Action<System.IServiceProvider, System.Net.Http.HttpClient>? ConfigureClientWithServiceProvider
    {
        get => _configureClientWithServiceProvider;
        set
        {
            if (value is not null && _configureClient is not null)
            {
                throw new System.NotSupportedException("Can't set both ConfigureClient and ConfigureClientWithServiceProvider at the same time. Pick one!");
            }

            _configureClientWithServiceProvider = value;
        }
    }

    public System.Action<System.Net.Http.HttpClient>? _configureClient;
    public System.Action<System.Net.Http.HttpClient>? ConfigureClient
    {
        get => _configureClient;
        set
        {
            if (value is not null && _configureClientWithServiceProvider is not null)
            {
                throw new System.NotSupportedException("Can't set both ConfigureClient and ConfigureClientWithServiceProvider at the same time. Pick one!");
            }

            _configureClient = value;
        }
    }

    public System.Action<IHttpClientBuilder>? ConfigureClientBuilder { get; set; }
}



[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public static class Registrations
{
    public static class __ClientNames
    {
        public const string Whiskies = "generateWhiskiesClient";
    }

    public static IServiceCollection RegisterApiClients(this IServiceCollection services, ApiRegistration registration)
    {
        if (registration.OptionsFactory is not null)
        {
            services.TryAddScoped<ClientOptions>(registration.OptionsFactory);
        }
        else if (registration.Options is not null)
        {
            services.TryAddSingleton(registration.Options);
        }
        else if (registration.OptionType == typeof(ClientOptions))
        {
            services.TryAddSingleton<ClientOptions>();
        }
        else
        {
            services.TryAddScoped(typeof(ClientOptions), registration.OptionType);
        }

        Register<IWhiskiesClient, WhiskiesClient>(__ClientNames.Whiskies);

        return services;

        void Register<TClient, TImplementation>(string httpClientName)
            where TClient : class
            where TImplementation : class, TClient
        {
            var apiClientHttpBuilder = services.AddHttpClient<TClient, TImplementation>(httpClientName);

            if (registration.ConfigureClientWithServiceProvider is not null)
            {
                apiClientHttpBuilder.ConfigureHttpClient(registration.ConfigureClientWithServiceProvider);
            }
            else if (registration.ConfigureClient is not null)
            {
                apiClientHttpBuilder.ConfigureHttpClient(registration.ConfigureClient);
            }

            if (registration.ConfigureClientBuilder is not null)
            {
                registration.ConfigureClientBuilder(apiClientHttpBuilder);
            }
        }
    }
}
